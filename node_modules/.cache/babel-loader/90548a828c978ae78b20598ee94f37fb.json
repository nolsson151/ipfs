{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Niklas/Udemy/Ethereum/Development/ipfs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Niklas/Udemy/Ethereum/Development/ipfs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Niklas/Udemy/Ethereum/Development/ipfs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Niklas/Udemy/Ethereum/Development/ipfs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Niklas/Udemy/Ethereum/Development/ipfs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Niklas/Udemy/Ethereum/Development/ipfs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Niklas/Udemy/Ethereum/Development/ipfs/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Niklas/Udemy/Ethereum/Development/ipfs/src/App.js\";\nimport React, { Component } from 'react';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport { Button } from 'reactstrap';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      transactionHash: '',\n      txReceipt: ''\n    };\n\n    _this.captureFile = function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    };\n\n    _this.convertToBuffer =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(reader) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer = _context.sent;\n\n                //set this buffer-using es6 syntax\n                _this.setState({\n                  buffer: buffer\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onClick =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              _this.setState({\n                blockNumber: \"waiting..\"\n              });\n\n              _this.setState({\n                gasUsed: \"waiting...\"\n              });\n\n              _context2.next = 5;\n              return web3.eth.getTransactionReceipt(_this.state.transactionHash, function (err, txReceipt) {\n                console.log(err, txReceipt);\n\n                _this.setState({\n                  txReceipt: txReceipt\n                });\n              });\n\n            case 5:\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[0, 7]]);\n    }));\n\n    _this.onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var accounts, ethAddress;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault(); //bring in user's metamask account address\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                _context3.next = 6;\n                return storehash.options.address;\n\n              case 6:\n                ethAddress = _context3.sent;\n\n                _this.setState({\n                  ethAddress: ethAddress\n                }); //save document to IPFS,return its hash#, and set hash# to state\n\n\n                _context3.next = 10;\n                return ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                  console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash\n\n                  _this.setState({\n                    ipfsHash: ipfsHash[0].hash\n                  }); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n                  //return the transaction hash from the ethereum contract\n\n\n                  storehash.methods.sendHash(_this.state.ipfsHash).send({\n                    from: accounts[0]\n                  }, function (error, transactionHash) {\n                    console.log(transactionHash);\n\n                    _this.setState({\n                      transactionHash: transactionHash\n                    });\n                  });\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Ethereum and IPFS using Infura\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"grid\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \" Choose file to send to IPFS \"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(Button, {\n        bsStyle: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Send it\")), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \" Get Transaction Receipt \"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        bordered: true,\n        responsive: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \" \"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Values\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"IPFS Hash stored on Ethereum\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \" : \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.state.ipfsHash)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \" : \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.state.ethAddress)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Tx # \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \" : \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, this.state.transactionHash))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Niklas/Udemy/Ethereum/Development/ipfs/src/App.js"],"names":["React","Component","web3","ipfs","storehash","Button","App","state","ipfsHash","buffer","ethAddress","transactionHash","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","onClick","blockNumber","gasUsed","eth","getTransactionReceipt","err","console","log","onSubmit","getAccounts","accounts","options","address","add","hash","methods","sendHash","send","error"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,MAAT,QAAuB,YAAvB;;IACMC,G;;;;;;;;;;;;;;;;;UACNC,K,GAAQ;AACFC,MAAAA,QAAQ,EAAC,IADP;AAEFC,MAAAA,MAAM,EAAC,EAFL;AAGFC,MAAAA,UAAU,EAAC,EAHT;AAIFC,MAAAA,eAAe,EAAC,EAJd;AAKFC,MAAAA,SAAS,EAAE;AALT,K;;UAQRC,W,GAAa,UAACC,KAAD,EAAW;AAChBA,MAAAA,KAAK,CAACC,eAAN;AACAD,MAAAA,KAAK,CAACE,cAAN;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,UAAIC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAb;AACAF,MAAAA,MAAM,CAACG,iBAAP,CAAyBN,IAAzB;;AACAG,MAAAA,MAAM,CAACI,SAAP,GAAmB;AAAA,eAAM,MAAKC,eAAL,CAAqBL,MAArB,CAAN;AAAA,OAAnB;AACD,K;;UAENK,e;;;;;+BAAkB,iBAAML,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEUM,MAAM,CAACC,IAAP,CAAYP,MAAM,CAACQ,MAAnB,CAFV;;AAAA;AAELnB,gBAAAA,MAFK;;AAGb;AACE,sBAAKoB,QAAL,CAAc;AAACpB,kBAAAA,MAAM,EAANA;AAAD,iBAAd;;AAJW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;UAOnBqB,O;;;;6BAAU;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEF,oBAAKD,QAAL,CAAc;AAACE,gBAAAA,WAAW,EAAC;AAAb,eAAd;;AACA,oBAAKF,QAAL,CAAc;AAACG,gBAAAA,OAAO,EAAC;AAAT,eAAd;;AAHE;AAAA,qBAIJ9B,IAAI,CAAC+B,GAAL,CAASC,qBAAT,CAA+B,MAAK3B,KAAL,CAAWI,eAA1C,EAA2D,UAACwB,GAAD,EAAMvB,SAAN,EAAkB;AACzEwB,gBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAgBvB,SAAhB;;AACA,sBAAKiB,QAAL,CAAc;AAACjB,kBAAAA,SAAS,EAATA;AAAD,iBAAd;AACD,eAHH,CAJI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUJwB,cAAAA,OAAO,CAACC,GAAR;;AAVI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAaVC,Q;;;;;+BAAW,kBAAOxB,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACLA,gBAAAA,KAAK,CAACE,cAAN,GADK,CAEX;;AAFW;AAAA,uBAGkBd,IAAI,CAAC+B,GAAL,CAASM,WAAT,EAHlB;;AAAA;AAGCC,gBAAAA,QAHD;AAAA;AAAA,uBAKmBpC,SAAS,CAACqC,OAAV,CAAkBC,OALrC;;AAAA;AAKChC,gBAAAA,UALD;;AAML,sBAAKmB,QAAL,CAAc;AAACnB,kBAAAA,UAAU,EAAVA;AAAD,iBAAd,EANK,CAOP;;;AAPO;AAAA,uBAQCP,IAAI,CAACwC,GAAL,CAAS,MAAKpC,KAAL,CAAWE,MAApB,EAA4B,UAAC0B,GAAD,EAAM3B,QAAN,EAAmB;AACnD4B,kBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAgB3B,QAAhB,EADmD,CAEnD;;AACA,wBAAKqB,QAAL,CAAc;AAAErB,oBAAAA,QAAQ,EAACA,QAAQ,CAAC,CAAD,CAAR,CAAYoC;AAAvB,mBAAd,EAHmD,CAInD;AACA;;;AACAxC,kBAAAA,SAAS,CAACyC,OAAV,CAAkBC,QAAlB,CAA2B,MAAKvC,KAAL,CAAWC,QAAtC,EAAgDuC,IAAhD,CAAqD;AACnDpB,oBAAAA,IAAI,EAAEa,QAAQ,CAAC,CAAD;AADqC,mBAArD,EAEG,UAACQ,KAAD,EAAQrC,eAAR,EAA4B;AAC7ByB,oBAAAA,OAAO,CAACC,GAAR,CAAY1B,eAAZ;;AACA,0BAAKkB,QAAL,CAAc;AAAClB,sBAAAA,eAAe,EAAfA;AAAD,qBAAd;AACD,mBALD;AAMD,iBAZK,CARD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;6BAsBF;AACT,aACQ;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADF,CADF,EAIR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJQ,EAKR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADV,EAEU;AAAM,QAAA,QAAQ,EAAE,KAAK2B,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAG,MADT;AAEE,QAAA,QAAQ,EAAI,KAAKzB,WAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKG,oBAAC,MAAD;AACA,QAAA,OAAO,EAAC,SADR;AAEA,QAAA,IAAI,EAAC,QAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALH,CAFV,EAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbA,EAcC,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAI,KAAKiB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAdD,EAeC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfD,EAgBE;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,UAAU,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CADF,CADd,EAQF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKvB,KAAL,CAAWC,QAAhB,CAHF,CADlB,EAMkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKD,KAAL,CAAWG,UAAhB,CAHF,CANlB,EAWkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKH,KAAL,CAAWI,eAAhB,CAHF,CAXlB,CARE,CAhBF,CALQ,CADR;AAmDK;;;;EAhHaV,S;;AAkHlB,eAAeK,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport { Button } from 'reactstrap';\nclass App extends Component {\nstate = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      transactionHash:'',\n      txReceipt: ''\n    };\n//Take file input from user\ncaptureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)\n      };\n//Convert the file to buffer to store on IPFS\n convertToBuffer = async(reader) => {\n      //file is converted to a buffer for upload to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer-using es6 syntax\n        this.setState({buffer});\n    };\n//ES6 async function\nonClick = async () => {\ntry{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\nawait web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        });\n      }\ncatch(error){\n      console.log(error);\n    }\n}\nonSubmit = async (event) => {\n      event.preventDefault();\n//bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n    //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n    //save document to IPFS,return its hash#, and set hash# to state\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash\n        this.setState({ ipfsHash:ipfsHash[0].hash });\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n        //return the transaction hash from the ethereum contract\n        storehash.methods.sendHash(this.state.ipfsHash).send({\n          from: accounts[0]\n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        });\n      })\n    };\nrender() {\nreturn (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Ethereum and IPFS using Infura</h1>\n          </header>\n<hr/>\n<grid>\n          <h3> Choose file to send to IPFS </h3>\n          <form onSubmit={this.onSubmit}>\n            <input\n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n             <Button\n             bsStyle=\"primary\"\n             type=\"submit\">\n             Send it\n             </Button>\n          </form>\n<hr/>\n <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n <hr/>\n  <table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th> </th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n<tbody>\n                  <tr>\n                    <td>IPFS Hash stored on Ethereum</td>\n                    <td> : </td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>\n                  <tr>\n                    <td>Ethereum Contract Address</td>\n                    <td> : </td>\n                    <td>{this.state.ethAddress}</td>\n                  </tr>\n                  <tr>\n                    <td>Tx # </td>\n                    <td> : </td>\n                    <td>{this.state.transactionHash}</td>\n                  </tr>\n                </tbody>\n            </table>\n        </grid>\n     </div>\n      );\n    }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}